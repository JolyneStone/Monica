using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Data.SqlClient;
using Dapper;
using Rye.DataAccess;
using Rye.MySql;

namespace @Model.NameSpace
{
	public partial class @RawInline($"Dao{Model.Name} : I{Model.Name}")
    {
        public MySqlConnectionProvider ConnectionProvider { get; }

        public @RawInline($"Dao{Model.Name}(MySqlConnectionProvider provider)")
        {
            ConnectionProvider = provider;
        }

        @if(HasIdentity(out var identityProperty))
        {
            @Raw($"\t\tpublic {identityProperty.Type} GetLastIdentity()")
            @Raw("\t\t{")
                @Raw("\t\t\tusing Connector conn = ConnectionProvider.GetConnection();")
                @Raw($"\t\t\treturn conn.Connection.ExecuteScalar<{identityProperty.Type}>(\"SELECT SCOPE_IDENTITY()\");")
            @Raw("\t\t}")
        }

        public int @RawInline($"Insert({Model.Name} model, IDbTransaction trans, IDbConnection conn)")
        {
        @Raw($"\tstring sql = \"{GetInsertSql()}\";")
            if (trans == null)
                return conn.Execute(sql, param: model, commandType: CommandType.Text);
            else
                return conn.Execute(sql, param: model, commandType: CommandType.Text, transaction: trans);
        }

        public async Task<int> @RawInline($"InsertAsync({Model.Name} model, IDbTransaction trans, IDbConnection conn)")
        {
        @Raw($"\tstring sql = \"{GetInsertSql()}\";")
            if (trans == null)
                return await conn.ExecuteAsync(sql, param: model, commandType: CommandType.Text);
            else
                return await conn.ExecuteAsync(sql, param: model, commandType: CommandType.Text, transaction: trans);
        }

        public int @RawInline($"Insert({Model.Name} model)")
        {
            using Connector conn = ConnectionProvider.GetConnection();
            return Insert(model, null, conn.Connection);
        }

        public async Task<int> @RawInline($"InsertAsync({Model.Name} model)")
        {
            using Connector conn = ConnectionProvider.GetConnection();
            return await InsertAsync(model, null, conn.Connection);
        }

        public int @RawInline($"BatchInsert(IEnumerable<{Model.Name}> items, IDbTransaction trans, IDbConnection conn)")
        {
        @Raw($"\tstring sql = \"{GetInsertSql()}\";")
            if (trans == null)
                return conn.Execute(sql, param: items, commandType: CommandType.Text);
            else
                return conn.Execute(sql, param: items, commandType: CommandType.Text, transaction: trans);
        }
        
        @RawInline($"public async Task<int> BatchInsertAsync(IEnumerable<{Model.Name}> items, IDbTransaction trans, IDbConnection conn)")
        {
        @Raw($"\tstring sql = \"{GetInsertSql()}\";")
             if (trans == null)
                return await conn.ExecuteAsync(sql, param: items, commandType: CommandType.Text);
            else
                return await conn.ExecuteAsync(sql, param: items, commandType: CommandType.Text, transaction: trans);
        }

        public int @RawInline($"BatchInsert(IEnumerable<{Model.Name}> items)")
        {
        @Raw($"\tstring sql = \"{GetInsertSql()}\";")
            using Connector conn = ConnectionProvider.GetConnection();
            return conn.Connection.Execute(sql, param: items, commandType: CommandType.Text);
        }
        
        @RawInline($"public async Task<int> BatchInsertAsync(IEnumerable<{Model.Name}> items)")
        {
        @Raw($"\tstring sql = \"{GetInsertSql()}\";")
            using Connector conn = ConnectionProvider.GetConnection();
            return await conn.Connection.ExecuteAsync(sql, param: items, commandType: CommandType.Text);
        }

        @RawInline($"public int InsertUpdate({Model.Name} model, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetInsertUpdateSql()}\";")
            if (trans == null)
                return conn.Execute(sql, param: model, commandType: CommandType.Text);
            else
                return conn.Execute(sql, param: model, commandType: CommandType.Text, transaction: trans);
        }
        
        @RawInline($"public async Task<int> InsertUpdateAsync({Model.Name} model, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetInsertUpdateSql()}\";")
            if (trans == null)
                return await conn.ExecuteAsync(sql, param: model, commandType: CommandType.Text);
            else
                return await conn.ExecuteAsync(sql, param: model, commandType: CommandType.Text, transaction: trans);
        }

        @RawInline($"public int InsertUpdate({Model.Name} model)")
        {
            using Connector conn = ConnectionProvider.GetConnection();
            return InsertUpdate(model, null, conn.Connection);
        }
        
        @RawInline($"public async Task<int> InsertUpdateAsync({Model.Name} model)")
        {
            using Connector conn = ConnectionProvider.GetConnection();
            return await InsertUpdateAsync(model, null, conn.Connection);
        }
        
        @RawInline($"public int Update({Model.Name} model, IDbTransaction trans, IDbConnection conn)")
		{
            @RawInline($"string sql = \"{GetUpdateSql()}\";")
            if (trans == null)
                @RawInline($"return conn.Execute(sql, param: model, commandType: CommandType.Text);")
            else
                @RawInline($"return conn.Execute(sql, param: model, commandType: CommandType.Text, transaction: trans);")
		}
        
        @RawInline($"public int Update({Model.Name} model)")
		{
			using Connector conn = ConnectionProvider.GetConnection();
            return Update(model, null, conn.Connection);
		}
        
        @RawInline($"public async Task<int> UpdateAsync({Model.Name} model, IDbTransaction trans, IDbConnection conn)")
		{
            @RawInline($"string sql = \"{GetUpdateSql()}\"");
            if (trans == null)
                @RawInline($"return await conn.ExecuteAsync(sql, param: model, commandType: CommandType.Text);")
            else
                @RawInline($"return await conn.ExecuteAsync(sql, param: model, commandType: CommandType.Text, transaction: trans);")
		}
        
        @RawInline($"public async Task<int> UpdateAsync({Model.Name} model)")
		{
            using Connector conn = ConnectionProvider.GetConnection();
            return await UpdateAsync(model, null, conn.Connection);
        }

        @RawInline($"public bool Delete({GetPrimaryKeyParams()}, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetDeleteSql()}\"");
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
            if (trans == null)
                return conn.Execute(sql, param: _params, commandType: CommandType.Text) > 0;
            else
                return conn.Execute(sql, param: _params, commandType: CommandType.Text,transaction: trans) > 0;
        }

        @RawInline($"public bool Delete({GetPrimaryKeyParams()})")
        {
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return Delete({GetPrimaryKeyParamsValue()}, null, conn.Connection);")
        }

        @RawInline($"public async Task<bool> DeleteAsync({GetPrimaryKeyParams()}, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetDeleteSql()}\"");
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
            if (trans == null)
                return await conn.ExecuteAsync(sql, param: _params, commandType: CommandType.Text) > 0;
            else
                return await conn.ExecuteAsync(sql, param: _params, commandType: CommandType.Text,transaction: trans) > 0;
        }

        @RawInline($"public async Task<bool> DeleteAsync({GetPrimaryKeyParams()})")
        {   
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return await DeleteAsync({GetPrimaryKeyParamsValue()}, null, conn.Connection);")
        }

        @RawInline($"public {Model.Name} GetModel({GetPrimaryKeyParams()})")
		{
            @RawInline($"string sql = \"{GetSelectSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return conn.Connection.QueryFirstOrDefault<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);")
		}				
        
        @RawInline($"public {Model.Name} GetModelByWriteDb({GetPrimaryKeyParams()})")
		{
            @RawInline($"string sql = \"{GetSelectSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return conn.Connection.QueryFirstOrDefault<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);")
		}
        
        @RawInline($"public async Task<{Model.Name}> GetModelAsync({GetPrimaryKeyParams()})")
		{  
            @RawInline($"string sql = \"{GetSelectSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return await conn.Connection.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);")
		}	
        
        @RawInline($"public async Task<{Model.Name}> GetModelByWriteDbAsync({GetPrimaryKeyParams()})")
		{  
            @RawInline($"string sql = \"{GetSelectSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
    		using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return await conn.Connection.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);")
		}	

        @RawInline($"public {Model.Name} GetModel({GetPrimaryKeyParams()}, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetSelectSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
            
            if (trans == null)
                @Raw($"return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);")
            else
                @Raw($"return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: _params, commandType: CommandType.Text, transaction: trans);")
        }

        @RawInline($"public async Task<{Model.Name}> GetModelAsync({GetPrimaryKeyParams()}, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetSelectSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
            
            if (trans == null)
                @Raw($"return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);")
            else
                @Raw($"return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: _params, commandType: CommandType.Text, transaction: trans);")
        }

        @RawInline($"public {Model.Name} GetModel(object param, string whereSql)")
        {
            @RawInline($"string sql = \"{GetSelectWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return conn.Connection.QueryFirstOrDefault<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public async Task<{Model.Name}> GetModelAsync(object param, string whereSql)")
        {
            @RawInline($"string sql = \"{GetSelectWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return await conn.Connection.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public {Model.Name} GetModelByWriteDb(object param, string whereSql)")
        {
            @RawInline($"string sql = \"{GetSelectWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return conn.Connection.QueryFirstOrDefault<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public async Task<{Model.Name}> GetModelByWriteDbAsync(object param, string whereSql)")
        {
            @RawInline($"string sql = \"{GetSelectWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return await conn.Connection.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public {Model.Name} GetModel(object param, string whereSql, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetSelectWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            
            if (trans == null)
                @Raw($"return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
            else
                @Raw($"return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: param, commandType: CommandType.Text, transaction: trans);")
        }

        @RawInline($"public async Task<{Model.Name}> GetModelAsync(object param, string whereSql, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetSelectWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            
            if (trans == null)
                @Raw($"return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
            else
                @Raw($"return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text, transaction: trans);")
        }

        @RawInline($"public {Model.Name} FirstOrDefault(object param, string whereSql, string orderSql)")
        {
            @RawInline($"string sql = \"{GetFirstOrDefaultWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \"ORDER BY \" + orderSql + \" LIMIT 1\";")
            
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return conn.Connection.QueryFirstOrDefault<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public async Task<{Model.Name}> FirstOrDefaultAsync(object param, string whereSql, string orderSql)")
        {
            @RawInline($"string sql = \"{GetFirstOrDefaultWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \"ORDER BY \" + orderSql + \" LIMIT 1\";")
            
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return await conn.Connection.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public {Model.Name} FirstOrDefaultByWriteDb(object param, string whereSql, string orderSql)")
        {
            @RawInline($"string sql = \"{GetFirstOrDefaultWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \"ORDER BY \" + orderSql + \" LIMIT 1\";")
            
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return conn.Connection.QueryFirstOrDefault<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public async Task<{Model.Name}> FirstOrDefaultByWriteDbAsync(object param, string whereSql, string orderSql)")
        {
            @RawInline($"string sql = \"{GetFirstOrDefaultWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \"ORDER BY \" + orderSql + \" LIMIT 1\";")
            
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return await conn.Connection.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public {Model.Name} FirstOrDefault(object param, string whereSql, string orderSql, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetFirstOrDefaultWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \"ORDER BY \" + orderSql + \" LIMIT 1\";")
            
            if (trans == null)
                @Raw($"return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
            else
                @Raw($"return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: param, commandType: CommandType.Text, transaction: trans);")
        }

        @RawInline($"public async Task<{Model.Name}> FirstOrDefaultAsync(object param, string whereSql, string orderSql, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetFirstOrDefaultWithNoParamSql()} WHERE 1=1 AND \" + whereSql + \"ORDER BY \" + orderSql + \" LIMIT 1\";")
            
            if (trans == null)
                @Raw($"return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
            else
                @Raw($"return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text, transaction: trans);")
        }
		
        @RawInline($"public IEnumerable<{Model.Name}> GetList()")
        {
            @RawInline($"string sql = \"{GetSelectAllSql()}\";")
                
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return conn.Connection.Query<{Model.Name}>(sql, commandType: CommandType.Text);")
        }

        @RawInline($"public async Task<IEnumerable<{Model.Name}>> GetListAsync()")
        {
            @RawInline($"string sql = \"{GetSelectAllSql()}\";")
            
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return await conn.Connection.QueryAsync<{Model.Name}>(sql, commandType: CommandType.Text);")
        }

        @RawInline($"public IEnumerable<{Model.Name}> GetList(IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetSelectAllSql()}\";")
                
            if (trans == null)
                @Raw($"return conn.Query<{Model.Name}>(sql, commandType: CommandType.Text);")
            else
                @Raw($"return conn.Query<{Model.Name}>(sql, commandType: CommandType.Text, transaction: trans);")
        }

        @RawInline($"public async Task<IEnumerable<{Model.Name}>> GetListAsync(IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetSelectAllSql()}\";")
                
            @RawInline($"return await conn.QueryAsync<{Model.Name}>(sql, commandType: CommandType.Text);")
        }

        @RawInline($"public IEnumerable<{Model.Name}> GetListByWriteDb()")
        {
            @RawInline($"string sql = \"{GetSelectAllSql()}\";")
                
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return conn.Connection.Query<{Model.Name}>(sql, commandType: CommandType.Text);")
        }

        @RawInline($"public async Task<IEnumerable<{Model.Name}>> GetListByWriteDbAsync()")
        {
            @RawInline($"string sql = \"{GetSelectAllSql()}\";")
                
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return await conn.Connection.QueryAsync<{Model.Name}>(sql, commandType: CommandType.Text);")
        }

        @RawInline($"public IEnumerable<{Model.Name}> GetListByWriteDb(IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetSelectAllSql()}\";")
                
            if (trans == null)
                @Raw($"return conn.Query<{Model.Name}>(sql, commandType: CommandType.Text);")
            else
                @Raw($"return conn.Query<{Model.Name}>(sql, commandType: CommandType.Text, transaction: trans);")
        }

        @RawInline($"public async Task<IEnumerable<{Model.Name}>> GetListByWriteDbAsync(IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetSelectAllSql()}\";")
                
            @RawInline($"return await conn.QueryAsync<{Model.Name}>(sql, commandType: CommandType.Text);")
        }

        @RawInline($"public IEnumerable<{Model.Name}> GetPage(object param, string whereSql, string orderSql, int pageIndex, int pageSize)")
        {
            @RawInline($"string sql = string.Format(\"{GetSelectPageSql()}\", whereSql, orderSql, (pageIndex - 1) * pageSize, pageSize);")
                
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return conn.Connection.Query<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public async Task<IEnumerable<{Model.Name}>> GetPageAsync(object param, string whereSql, string orderSql, int pageIndex, int pageSize)")
        {
            @RawInline($"string sql = string.Format(\"{GetSelectPageSql()}\", whereSql, orderSql, (pageIndex - 1) * pageSize, pageSize);")
                
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            @RawInline($"return await conn.Connection.QueryAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public IEnumerable<{Model.Name}> GetPageByWriteDb(object param, string whereSql, string orderSql, int pageIndex, int pageSize)")
        {
            @RawInline($"string sql = string.Format(\"{GetSelectPageSql()}\", whereSql, orderSql, (pageIndex - 1) * pageSize, pageSize);")
                
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return conn.Connection.Query<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public async Task<IEnumerable<{Model.Name}>> GetPageByWriteDbAsync(object param, string whereSql, string orderSql, int pageIndex, int pageSize)")
        {
            @RawInline($"string sql = string.Format(\"{GetSelectPageSql()}\", whereSql, orderSql, (pageIndex - 1) * pageSize, pageSize);")
                
            using Connector conn = ConnectionProvider.GetConnection();
            @RawInline($"return await conn.Connection.QueryAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
        }

        @RawInline($"public IEnumerable<{Model.Name}> GetPage(object param, string whereSql, string orderSql, int pageIndex, int pageSize, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = string.Format(\"{GetSelectPageSql()}\", whereSql, orderSql, (pageIndex - 1) * pageSize, pageSize);")
                
            if (trans == null)
                @Raw($"return conn.Query<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
            else
                @Raw($"return conn.Query<{Model.Name}>(sql, param: param, commandType: CommandType.Text, transaction: trans);")
        }

        @RawInline($"public async Task<IEnumerable<{Model.Name}>> GetPageAsync(object param, string whereSql, string orderSql, int pageIndex, int pageSize, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = string.Format(\"{GetSelectPageSql()}\", whereSql, orderSql, (pageIndex - 1) * pageSize, pageSize);")
                
            if (trans == null)
                @Raw($"return await conn.QueryAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text);")
            else
                @Raw($"return await conn.QueryAsync<{Model.Name}>(sql, param: param, commandType: CommandType.Text, transaction: trans);")
        }

        @RawInline($"public bool Exists({GetPrimaryKeyParams()})")
        {
            @RawInline($"string sql = \"{GetExistsSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            return conn.Connection.ExecuteScalar<int>(sql, param: _params, commandType: CommandType.Text) > 0;
        }

        @RawInline($"public bool ExistsByWriteDb({GetPrimaryKeyParams()})")
        {
            @RawInline($"string sql = \"{GetExistsSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
            using Connector conn = ConnectionProvider.GetConnection();
            return conn.Connection.ExecuteScalar<int>(sql, param: _params, commandType: CommandType.Text) > 0;
        }

        @RawInline($"public async Task<bool> ExistsAsync({GetPrimaryKeyParams()})")
        {
            @RawInline($"string sql = \"{GetExistsSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            return await conn.Connection.ExecuteScalarAsync<int>(sql, param: _params, commandType: CommandType.Text) > 0;
        }

        @RawInline($"public async Task<bool> ExistsByWriteDbAsync({GetPrimaryKeyParams()})")
        {
            @RawInline($"string sql = \"{GetExistsSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
            using Connector conn = ConnectionProvider.GetConnection();
            return await conn.Connection.ExecuteScalarAsync<int>(sql, param: _params, commandType: CommandType.Text) > 0;
        }

        @RawInline($"public bool Exists({GetPrimaryKeyParams()}, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetExistsSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
            if (trans == null)
                return conn.ExecuteScalar<int>(sql, param: _params, commandType: CommandType.Text) > 0;
            else
                return conn.ExecuteScalar<int>(sql, param: _params, commandType: CommandType.Text, transaction: trans) > 0;
        }

        @RawInline($"public async Task<bool> ExistsAsync({GetPrimaryKeyParams()}, IDbTransaction trans, IDbConnection conn)")
        {
            @RawInline($"string sql = \"{GetExistsSql()}\";")
            var _params = new DynamicParameters();
            @foreach(var c in Model.Properties) 
            {
        	    if(c.IsKey)
                {
                    @Raw($"\t\t\t_params.Add(\"@{c.Name}\", value: {GetParameterName(c.Name)}, direction: ParameterDirection.Input);")
                }        		
        	}
                
            if (trans == null)
                return await conn.ExecuteScalarAsync<int>(sql, param: _params, commandType: CommandType.Text) > 0;
            else
                return await conn.ExecuteScalarAsync<int>(sql, param: _params, commandType: CommandType.Text, transaction: trans) > 0;
        }

        public bool Exists(object param, string whereSql)
        {
            @RawInline($"string sql = \"SELECT 1 FROM [{Model.SqlTable}] WITH(NOLOCK) WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            return conn.Connection.ExecuteScalar<int>(sql, param: param, commandType: CommandType.Text) > 0;
        }

        public async Task<bool> ExistsAsync(object param, string whereSql)
        {
            @RawInline($"string sql = \"SELECT 1 FROM [{Model.SqlTable}] WITH(NOLOCK) WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            return await conn.Connection.ExecuteScalarAsync<int>(sql, param: param, commandType: CommandType.Text) > 0;
        }

        public bool ExistsByWriteDb(object param, string whereSql)
        {
            @RawInline($"string sql = \"SELECT 1 FROM [{Model.SqlTable}] WITH(NOLOCK) WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            using Connector conn = ConnectionProvider.GetConnection();
            return conn.Connection.ExecuteScalar<int>(sql, param: param, commandType: CommandType.Text) > 0;
        }

        public async Task<bool> ExistsByWriteDbAsync(object param, string whereSql)
        {
            @RawInline($"string sql = \"SELECT 1 FROM [{Model.SqlTable}] WITH(NOLOCK) WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            using Connector conn = ConnectionProvider.GetConnection();
            return await conn.Connection.ExecuteScalarAsync<int>(sql, param: param, commandType: CommandType.Text) > 0;
        }

        public bool Exists(object param, string whereSql, IDbTransaction trans, IDbConnection conn)
        {
            @RawInline($"string sql = \"SELECT 1 FROM [{Model.SqlTable}] WITH(NOLOCK) WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            if (trans == null)
                return conn.ExecuteScalar<int>(sql, param: param, commandType: CommandType.Text) > 0;
            else
                return conn.ExecuteScalar<int>(sql, param: param, commandType: CommandType.Text, transaction: trans) > 0;
        }

        public async Task<bool> ExistsAsync(object param, string whereSql, IDbTransaction trans, IDbConnection conn)
        {
            @RawInline($"string sql = \"SELECT 1 FROM [{Model.SqlTable}] WITH(NOLOCK) WHERE 1=1 AND \" + whereSql + \" LIMIT 1\";")
            if (trans == null)
                return await conn.ExecuteScalarAsync<int>(sql, param: param, commandType: CommandType.Text) > 0;
            else
                return await conn.ExecuteScalarAsync<int>(sql, param: param, commandType: CommandType.Text, transaction: trans) > 0;
        }

        public int Count()
        {
            @RawInline($"string sql = \"{GetCountSql()}\";")
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            return conn.Connection.ExecuteScalar<int>(sql, commandType: CommandType.Text);
        }

        public async Task<int> CountAsync()
        {
            @RawInline($"string sql = \"{GetCountSql()}\";")
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            return await conn.Connection.ExecuteScalarAsync<int>(sql, commandType: CommandType.Text);
        }

        public int CountByWriteDb()
        {
            @RawInline($"string sql = \"{GetCountSql()}\";")
            using Connector conn = ConnectionProvider.GetConnection();
            return conn.Connection.ExecuteScalar<int>(sql, commandType: CommandType.Text);
        }

        public async Task<int> CountByWriteDbAsync()
        {
            @RawInline($"string sql = \"{GetCountSql()}\";")
            using Connector conn = ConnectionProvider.GetConnection();
            return await conn.Connection.ExecuteScalarAsync<int>(sql, commandType: CommandType.Text);
        }

        public int Count(object param, string whereSql)
        {
            @RawInline($"string sql = \"{GetCountSql()} WHERE 1=1 AND \" + whereSql;")
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            return conn.Connection.ExecuteScalar<int>(sql, param: param, commandType: CommandType.Text);
        }

        public async Task<int> CountAsync(object param, string whereSql)
        {
            @RawInline($"string sql = \"{GetCountSql()} WHERE 1=1 AND \" + whereSql;")
            using Connector conn = ConnectionProvider.GetReadOnlyConnection();
            return await conn.Connection.ExecuteScalarAsync<int>(sql, param: param, commandType: CommandType.Text);
        }

        public int CountByWriteDb(object param, string whereSql)
        {
            @RawInline($"string sql = \"{GetCountSql()} WHERE 1=1 AND \" + whereSql;")
            using Connector conn = ConnectionProvider.GetConnection();
            return conn.Connection.ExecuteScalar<int>(sql, param: param, commandType: CommandType.Text);
        }
        
        public async Task<int> CountByWriteDbAsync(object param, string whereSql)
        {
            @RawInline($"string sql = \"{GetCountSql()} WHERE 1=1 AND \" + whereSql;")
            using Connector conn = ConnectionProvider.GetConnection();
            return await conn.Connection.ExecuteScalarAsync<int>(sql, param: param, commandType: CommandType.Text);
        }

        public int Count(IDbTransaction trans, IDbConnection conn)
        {
            @RawInline($"string sql = \"{GetCountSql()}\";")
            if (trans == null)
                return conn.ExecuteScalar<int>(sql, commandType: CommandType.Text);
            else
                return conn.ExecuteScalar<int>(sql, commandType: CommandType.Text, transaction: trans);
        }

        public async Task<int> CountAsync(IDbTransaction trans, IDbConnection conn)
        {
            @RawInline($"string sql = \"{GetCountSql()}\";")
            if (trans == null)
                return await conn.ExecuteScalarAsync<int>(sql, commandType: CommandType.Text);
            else
                return await conn.ExecuteScalarAsync<int>(sql, commandType: CommandType.Text, transaction: trans);
        }

        public int Count(object param, string whereSql, IDbTransaction trans, IDbConnection conn)
        {
            @RawInline($"string sql = \"{GetCountSql()}WHERE 1=1 AND \" + whereSql;")
            if (trans == null)
                return conn.ExecuteScalar<int>(sql, param: param, commandType: CommandType.Text);
            else
                return conn.ExecuteScalar<int>(sql, param: param, commandType: CommandType.Text, transaction: trans);
        }

        public async Task<int> CountAsync(object param, string whereSql, IDbTransaction trans, IDbConnection conn)
        {
            @RawInline($"string sql = \"{GetCountSql()}WHERE 1=1 AND \" + whereSql;")
            if (trans == null)
                return await conn.ExecuteScalarAsync<int>(sql, param: param, commandType: CommandType.Text);
            else
                return await conn.ExecuteScalarAsync<int>(sql, param: param, commandType: CommandType.Text, transaction: trans);
        }
        
        
        private string GetColumns()
        {
            @RawInline($"return \"{GetSelectColumnsSql()}\";")
        }
	}
}
