using System;
using System.Data;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;

namespace @Model.NameSpace
{
    @Raw($"[Injection(ServiceLifetime.Singleton, InjectionPolicy.Replace)]")
	@Raw($"public interface I{Model.Name} : IDataBaseOperate<{Model.Name}>")
	{
		@Raw($"bool Delete({GetPrimaryKeyParams()});")        
        @Raw($"bool Delete({GetPrimaryKeyParams()}, object trans, IDbConnection conn);")     
        @Raw($"Task<bool> DeleteAsync({GetPrimaryKeyParams()});")
        @Raw($"Task<bool> DeleteAsync({GetPrimaryKeyParams()}, object trans, IDbConnection conn);")
        
        @Raw($"{Model.Name} GetModel({GetPrimaryKeyParams()});")
        @Raw($"Task<{Model.Name}> GetModelAsync({GetPrimaryKeyParams()});")
        @Raw($"{Model.Name} GetModelByWriteDb({GetPrimaryKeyParams()});")
        @Raw($"Task<{Model.Name}> GetModelByWriteDbAsync({GetPrimaryKeyParams()});")
        @Raw($"bool Exists({GetPrimaryKeyParams()});")        
        @Raw($"Task<bool> ExistsAsync({GetPrimaryKeyParams()});")
	}
}
