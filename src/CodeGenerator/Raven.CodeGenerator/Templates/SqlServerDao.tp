using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Data.SqlClient;
using Dapper;
using Raven.DataAccess;
using Raven.SqlServer;

namespace @Model.NameSpace
{
	@Raw($"public partial class Dao{Model.Name} : I{Model.Name}")
	{
        public SqlServerConnectionProvider ConnectionProvider { get; }

        @Raw($"public Dao{Model.Name}(SqlServerConnectionProvider provider)")
        {
            ConnectionProvider = provider;
        }

		@Raw("#region 数据库基本操作方法")		
		        
        @Raw($"public {Model.Name} Insert({Model.Name} model, IDbTransaction trans, IDbConnection conn)
        {
            @Raw($"string sql = "<%=GetInsertSql(SourceTable)%>");
            if (trans == null)
                return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: model, commandType: CommandType.Text);
            else
                return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: model, commandType: CommandType.Text, transaction: trans);
        }
        
        public async Task<{Model.Name}> InsertAsync({Model.Name} model, IDbTransaction trans, IDbConnection conn)
        {
            string sql = "<%=GetInsertSql(SourceTable)%>";
            if (trans == null)
                return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: model, commandType: CommandType.Text);
            else
                return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: model, commandType: CommandType.Text, transaction: trans);
        }

        public {Model.Name} Insert({Model.Name} model)
        {
            IDbConnection conn = ConnectionProvider.GetConnection();
            return Insert(model, null, conn);
        }
        
        public async Task<{Model.Name}> InsertAsync({Model.Name} model)
        {
            IDbConnection conn = ConnectionProvider.GetConnection();
            return await InsertAsync(model, null, conn);
        }
        
        public int BatchInsert(IEnumerable<{Model.Name}> items)
        {
            StringBuilder sb = new StringBuilder("<%=GetBatchInsertSql(SourceTable)%>");
            foreach (var item in items)
            {
                sb.Append($"<%=GetBatchInsertValuesSql(SourceTable)%>");
            }
            string sql = sb.ToString();
            sql = sql.Remove(sql.Length - 1);
            
            IDbConnection conn = ConnectionProvider.GetConnection();
            return conn.Execute(sql, commandType: CommandType.Text);
        }
        
        public async Task<int> BatchInsertAsync(IEnumerable<{Model.Name}> items)
        {
            StringBuilder sb = new StringBuilder("<%=GetBatchInsertSql(SourceTable)%>");
            foreach (var item in items)
            {
                sb.Append($"<%=GetBatchInsertValuesSql(SourceTable)%>");
            }
            string sql = sb.ToString();
            sql = sql.Remove(sql.Length - 1);
                
            IDbConnection conn = ConnectionProvider.GetConnection();
            return await conn.ExecuteAsync(sql, commandType: CommandType.Text);
        }       
        
        
        public {Model.Name} InsertUpdate({Model.Name} model, IDbTransaction trans, IDbConnection conn)
        {
            string sql = "<%=GetInsertUpdateSql(SourceTable)%>";
            if (trans == null)
                return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: model, commandType: CommandType.Text);
            else
                return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: model, commandType: CommandType.Text, transaction: trans);
        }
        
        public async Task<{Model.Name}> InsertUpdateAsync({Model.Name} model, IDbTransaction trans, IDbConnection conn)
        {
            string sql = "<%=GetInsertUpdateSql(SourceTable)%>";
            if (trans == null)
                return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: model, commandType: CommandType.Text);
            else
                return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: model, commandType: CommandType.Text, transaction: trans);
        }

        public {Model.Name} InsertUpdate({Model.Name} model)
        {
            IDbConnection conn = ConnectionProvider.GetConnection();
            {
                return InsertUpdate(model, null, conn);
            }
        }
        
        public async Task<{Model.Name}> InsertUpdateAsync({Model.Name} model)
        {
            IDbConnection conn = ConnectionProvider.GetConnection();
            return await InsertUpdateAsync(model, null, conn);
        }       
        
		public {Model.Name} Update({Model.Name} model, IDbTransaction trans, IDbConnection conn)
		{
            string sql = "<%=GetUpdateSql(SourceTable)%>";
            if (trans == null)
                return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: model, commandType: CommandType.Text);
            else
                return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: model, commandType: CommandType.Text, transaction: trans);
		}
        
        public {Model.Name} Update({Model.Name} model)
		{
			IDbConnection conn = ConnectionProvider.GetConnection();
            return Update(model, null, conn);
		}
        
        public async Task<{Model.Name}> UpdateAsync({Model.Name} model, IDbTransaction trans, IDbConnection conn)
		{
            string sql = "<%=GetUpdateSql(SourceTable)%>";
            if (trans == null)
                return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: model, commandType: CommandType.Text);
            else
                return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: model, commandType: CommandType.Text, transaction: trans);
		}
        
        public async Task<{Model.Name}> UpdateAsync({Model.Name} model)
		{
            IDbConnection conn = ConnectionProvider.GetConnection();
            return await UpdateAsync(model, null, conn);
        }

        public bool Delete(<%=GetInputParameter(SourceTable)%>, IDbTransaction trans, IDbConnection conn)
        {
            string sql = "<%=GetDeleteSql(SourceTable) %>";
            var _params = new DynamicParameters();
            <% foreach(ColumnSchema c in SourceTable.Columns) %>
            <%{%>
        	<%if(c.IsPrimaryKeyMember){%>
            _params.Add("@<%=c.Name%>", value: <%=GetParameterName(c)%>, dbType: DbType.<%=GetSqlDbType(c)%>, direction: ParameterDirection.Input);
            <%}%>        		
        	<%}%>
            if (trans == null)
                return conn.Execute(sql, param: _params, commandType: CommandType.Text) > 0;
            else
                return conn.Execute(sql, param: _params, commandType: CommandType.Text,transaction: trans) > 0;
        }

        public bool Delete(<%=GetInputParameter(SourceTable)%>)
        {
            IDbConnection conn = ConnectionProvider.GetConnection();
            return Delete(<%=GetInputParameterValue(SourceTable)%>, null,conn);
        }

        public async Task<bool> DeleteAsync(<%=GetInputParameter(SourceTable)%>, IDbTransaction trans, IDbConnection conn)
        {
            string sql = "<%=GetDeleteSql(SourceTable) %>";
            var _params = new DynamicParameters();
            <% foreach(ColumnSchema c in SourceTable.Columns) %>
            <%{%>
        	<%if(c.IsPrimaryKeyMember){%>
            _params.Add("@<%=c.Name%>", value: <%=GetParameterName(c)%>, dbType: DbType.<%=GetSqlDbType(c)%>, direction: ParameterDirection.Input);
            <%}%>        		
        	<%}%>
            if (trans == null)
                return await conn.ExecuteAsync(sql, param: _params, commandType: CommandType.Text) > 0;
            else
                return await conn.ExecuteAsync(sql, param: _params, commandType: CommandType.Text,transaction: trans) > 0;
        }

        public async Task<bool> DeleteAsync(<%=GetInputParameter(SourceTable)%>)
        {   
            IDbConnection conn = ConnectionProvider.GetConnection();
            return await DeleteAsync(<%=GetInputParameterValue(SourceTable)%>, null,conn);
        }
		
		public {Model.Name} GetModel(<%=GetInputParameter(SourceTable)%>)
		{
            string sql = "<%=GetSelectSql(SourceTable)%>";
            var _params = new DynamicParameters();
            <%foreach(ColumnSchema c in SourceTable.Columns) %>
            <%{%>
        	<%if(c.IsPrimaryKeyMember){%>
            _params.Add("@<%=c.Name%>", value: <%=GetParameterName(c)%>, dbType: DbType.<%=GetSqlDbType(c)%>, direction: ParameterDirection.Input);
            <%}%>        		
        	<%}%>
                
            IDbConnection conn = ConnectionProvider.GetReadOnlyConnection();
            return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);
		}				
        
        public {Model.Name} GetModelByWriteDb(<%=GetInputParameter(SourceTable)%>)
		{
            string sql = "<%=GetSelectSql(SourceTable)%>";
            var _params = new DynamicParameters();
            <%foreach(ColumnSchema c in SourceTable.Columns) %>
            <%{%>
        	<%if(c.IsPrimaryKeyMember){%>
            _params.Add("@<%=c.Name%>", value: <%=GetParameterName(c)%>, dbType: DbType.<%=GetSqlDbType(c)%>, direction: ParameterDirection.Input);
            <%}%>        		
        	<%}%>
                
            IDbConnection conn = ConnectionProvider.GetConnection();
            return conn.QueryFirstOrDefault<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);
		}
        
        public async Task<{Model.Name}> GetModelAsync(<%=GetInputParameter(SourceTable)%>)
		{  
            string sql = "<%=GetSelectSql(SourceTable)%>";
            var _params = new DynamicParameters();
            <% foreach(ColumnSchema c in SourceTable.Columns) %>
            <%{%>
        	<%if(c.IsPrimaryKeyMember){%>
            _params.Add("@<%=c.Name%>", value: <%=GetParameterName(c)%>, dbType: DbType.<%=GetSqlDbType(c)%>, direction: ParameterDirection.Input);
            <%}%>        		
        	<%}%>
                
    		IDbConnection conn = ConnectionProvider.GetReadOnlyConnection();
            return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);
		}	
        
        public async Task<{Model.Name}> GetModelByWriteDbAsync(<%=GetInputParameter(SourceTable)%>)
		{  
            string sql = "<%=GetSelectSql(SourceTable)%>";
            var _params = new DynamicParameters();
            <% foreach(ColumnSchema c in SourceTable.Columns) %>
            <%{%>
        	<%if(c.IsPrimaryKeyMember){%>
            _params.Add("@<%=c.Name%>", value: <%=GetParameterName(c)%>, dbType: DbType.<%=GetSqlDbType(c)%>, direction: ParameterDirection.Input);
            <%}%>        		
        	<%}%>
                
    		IDbConnection conn = ConnectionProvider.GetConnection();
            return await conn.QueryFirstOrDefaultAsync<{Model.Name}>(sql, param: _params, commandType: CommandType.Text);
		}	
		
        public IEnumerable<%="<"+GetClassName(SourceTable)%>> GetList()
        {
            string sql = "<%=GetSelectAllSql(SourceTable)%>";
                
            IDbConnection conn = ConnectionProvider.GetReadOnlyConnection();
            return conn.Query<{Model.Name}>(sql, commandType: CommandType.Text);
        }

        public async Task<IEnumerable<%="<"+GetClassName(SourceTable)%>>> GetListAsync()
        {
            string sql = "<%=GetSelectAllSql(SourceTable)%>";
                
            IDbConnection conn = ConnectionProvider.GetReadOnlyConnection();
            return await conn.QueryAsync<{Model.Name}>(sql, commandType: CommandType.Text);
        }
		        
        public bool Exists(<%=GetInputParameter(SourceTable)%>)
        {
            string sql = "<%=GetExistsSql(SourceTable)%>";
            var _params = new DynamicParameters();
            <% foreach(ColumnSchema c in SourceTable.Columns) %>
            <%{%>
        	<%if(c.IsPrimaryKeyMember){%>
            _params.Add("@<%=c.Name%>", value: <%=GetParameterName(c)%>, dbType: DbType.<%=GetSqlDbType(c)%>, direction: ParameterDirection.Input);
            <%}%>        		
        	<%}%>
                
            IDbConnection conn = ConnectionProvider.GetReadOnlyConnection();
            return conn.ExecuteScalar<int>(sql, param: _params, commandType: CommandType.Text) > 0;
        }

        public async Task<bool> ExistsAsync(<%=GetInputParameter(SourceTable)%>)
        {
            string sql = "<%=GetExistsSql(SourceTable)%>";
            var _params = new DynamicParameters();
            <% foreach(ColumnSchema c in SourceTable.Columns) %>
            <%{%>
        	<%if(c.IsPrimaryKeyMember){%>
            _params.Add("@<%=c.Name%>", value: <%=GetParameterName(c)%>, dbType: DbType.<%=GetSqlDbType(c)%>, direction: ParameterDirection.Input);
            <%}%>        		
        	<%}%>
                
            IDbConnection conn = ConnectionProvider.GetReadOnlyConnection();
            return await conn.ExecuteScalarAsync<int>(sql, param: _params, commandType: CommandType.Text) > 0;
        }
        
        public <%= GetClassName(SourceTable)%> LoadModel(IDataReader dr)
		{
				<%= GetClassName(SourceTable) %> model = new <%= GetClassName(SourceTable) %>();
				<%for(int i = 0; i < SourceTable.Columns.Count; i++ ) {%>
				<% ColumnSchema record = SourceTable.Columns[i];%>
				<% if (record.AllowDBNull) {%>
			if (dr["<%=record.Name%>"] != DBNull.Value)
				model.<%=GetPropertyName(record)+"\t"%> = <%=GetReaderMethod(record,record.Name)%>;	
				<%} else {%>
				model.<%=GetPropertyName(record)+"\t"%> = <%=GetReaderMethod(record,record.Name)%>;
					<%} }%>
					
			return model;
		}
        
        public <%= GetClassName(SourceTable)%> LoadModel(DataRow dr)
		{
			<%= GetClassName(SourceTable) %> model = new <%= GetClassName(SourceTable) %>();
			<%for(int i = 0; i < SourceTable.Columns.Count; i++ ) {%>
			<% ColumnSchema record = SourceTable.Columns[i];%>
			<% if (record.AllowDBNull) {%>
			if (dr["<%=record.Name%>"] != DBNull.Value)
				model.<%=GetPropertyName(record)+"\t"%> = <%=GetReaderMethod(record,record.Name)%>;	
				<%} else {%>
				model.<%=GetPropertyName(record)+"\t"%> = <%=GetReaderMethod(record,record.Name)%>;
					<%} }%>
					
			return model;
		}
        
        public IEnumerable<<%= GetClassName(SourceTable)%>> LoadModel(DataTable dt)
        {
            List<<%= GetClassName(SourceTable)%>> list = new List<<%= GetClassName(SourceTable)%>>();
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    <%= GetClassName(SourceTable) %> model = new <%= GetClassName(SourceTable) %>();
                    <%for(int i = 0; i < SourceTable.Columns.Count; i++ ) {%>
                    <% ColumnSchema record = SourceTable.Columns[i];%>
                    <% if (record.AllowDBNull) {%>
                    if (dr["<%=record.Name%>"] != DBNull.Value)
                    model.<%=GetPropertyName(record)+"\t"%> = <%=GetReaderMethod(record,record.Name)%>;	
                    <%} else {%>
                    model.<%=GetPropertyName(record)+"\t"%> = <%=GetReaderMethod(record,record.Name)%>;
                    <%} }%>
                    list.Add(model);
                }
            }
            return list;
        }
        
        
        private string GetColumns()
        {
            return "<%=GetSelectColumnsSql(SourceTable)%>";
        }
		
		
		#endregion
	}
}
